type: edu
custom_name: stage6
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import com.google.gson.*;
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import org.w3c.dom.*;

    import javax.xml.parsers.*;
    import java.io.*;

    import java.math.BigDecimal;
    import java.util.*;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends StageTest<Clue> {
        public ConverterTest() {
            super(Main.class);
        }

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "{\n" +
                    "    \"transactions\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"data\": [\n" +
                    "            124,\n" +
                    "            true,\n" +
                    "            false,\n" +
                    "            [ ],\n" +
                    "            [],\n" +
                    "            { },\n" +
                    "            {},\n" +
                    "            [\n" +
                    "                1, 2, 3,\n" +
                    "                {\n" +
                    "                    \"@attr\": \"value6\",\n" +
                    "                    \"#element\": \"value7\"\n" +
                    "                }\n" +
                    "            ],\n" +
                    "            null,\n" +
                    "            \"\",\n" +
                    "            {\n" +
                    "                \"key1\": \"value1\",\n" +
                    "                \"key2\": {\n" +
                    "                    \"@attr\": \"value2\",\n" +
                    "                    \"#key2\": \"value3\"\n" +
                    "                }\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"@attr2\": \"value4\",\n" +
                    "                \"#element\": \"value5\"\n" +
                    "            }\n" +
                    "        ]\n" +
                    "    }\n" +
                    "}",


                "<transactions>\n" +
                    "    <id>6753322</id>\n" +
                    "    <data>\n" +
                    "        <element>124</element>\n" +
                    "        <element>true</element>\n" +
                    "        <element>false</element>\n" +
                    "        <element></element>\n" +
                    "        <element></element>\n" +
                    "        <element></element>\n" +
                    "        <element></element>\n" +
                    "        <element>\n" +
                    "            <element>1</element>\n" +
                    "            <element>2</element>\n" +
                    "            <element>3</element>\n" +
                    "            <element attr=\"value6\">value7</element>\n" +
                    "        </element>\n" +
                    "        <element />\n" +
                    "        <element></element>\n" +
                    "        <element>\n" +
                    "            <key1>value1</key1>\n" +
                    "            <key2 attr=\"value2\">value3</key2>\n" +
                    "        </element>\n" +
                    "        <element attr2=\"value4\">value5</element>\n" +
                    "    </data>\n" +
                    "</transactions>"
            );



            allTests.put(
                "<?xml version = \"1.0\" encoding = \"utf-8\"?>\n" +
                    "<transactions>\n" +
                    "    <transaction>\n" +
                    "        <id>6753323</id>\n" +
                    "        <number region = \"Russia\">8-900-000-00-00</number>\n" +
                    "        <date day = \"12\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency=\"EUR\">1000.00</amount>\n" +
                    "        <completed>true</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533244</id>\n" +
                    "        <number region = \"Russia\">8-900-000-00-01</number>\n" +
                    "        <date day = \"13\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency =\"RUB\">2000.00</amount>\n" +
                    "        <completed>true</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533257</id>\n" +
                    "        <number region=\"Russia\">8-900-000-00-02</number>\n" +
                    "        <date day = \"14\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency = \"EUR\">3000.00</amount>\n" +
                    "        <completed>false</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533259</id>\n" +
                    "        <number region = \"Ukraine\">8-900-000-00-03</number>\n" +
                    "        <date day = \"15\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency = \"GRN\">4000.00</amount>\n" +
                    "        <completed>false</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533566</id>\n" +
                    "        <number region = \"Ukraine\">8-900-000-00-04</number>\n" +
                    "        <date day = \"16\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency = \"USD\">5000.00</amount>\n" +
                    "        <completed>false</completed>\n" +
                    "    </transaction>\n" +
                    "</transactions>",


                "{\n" +
                    "    \"transactions\" : [\n" +
                    "        {\n" +
                    "            \"id\" : \"6753323\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Russia\",\n" +
                    "                \"#number\" : \"8-900-000-00-00\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"12\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"EUR\",\n" +
                    "                \"#amount\" : \"1000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"true\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533244\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Russia\",\n" +
                    "                \"#number\" : \"8-900-000-00-01\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"13\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"RUB\",\n" +
                    "                \"#amount\" : \"2000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"true\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533257\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Russia\",\n" +
                    "                \"#number\" : \"8-900-000-00-02\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"14\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"EUR\",\n" +
                    "                \"#amount\" : \"3000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"false\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533259\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Ukraine\",\n" +
                    "                \"#number\" : \"8-900-000-00-03\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"15\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"GRN\",\n" +
                    "                \"#amount\" : \"4000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"false\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533566\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Ukraine\",\n" +
                    "                \"#number\" : \"8-900-000-00-04\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"16\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"USD\",\n" +
                    "                \"#amount\" : \"5000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"false\"\n" +
                    "        }\n" +
                    "    ]\n" +
                    "}"
            );



            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753324\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-000\"\n" +
                    "        },\n" +
                    "        \"special1\": false,\n" +
                    "        \"special2\": true,\n" +
                    "        \"empty1\": null,\n" +
                    "        \"empty2\": { },\n" +
                    "        \"empty3\": [ ],\n" +
                    "        \"empty4\": {},\n" +
                    "        \"empty5\": [],\n" +
                    "        \"empty6\": {\n" +
                    "\n" +
                    "        },\n" +
                    "        \"empty7\": [\n" +
                    "\n" +
                    "        ],\n" +
                    "        \"empty8\": \"\",\n" +
                    "        \"array1\": [\n" +
                    "            null, null\n" +
                    "        ],\n" +
                    "        \"array2\": [\n" +
                    "            [],\n" +
                    "            true, false, null,\n" +
                    "            123, 123.456,\n" +
                    "            \"\",\n" +
                    "            {\n" +
                    "                \"key1\": \"value1\",\n" +
                    "                \"key2\": {\n" +
                    "                    \"@attr\": \"value2\",\n" +
                    "                    \"#key2\": \"value3\"\n" +
                    "                }\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"@attr2\": \"value4\",\n" +
                    "                \"#element\": \"value5\"\n" +
                    "            }\n" +
                    "            ,\n" +
                    "            {\n" +
                    "                \"@attr3\": \"value4\",\n" +
                    "                \"#elem\": \"value5\"\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"#element\": null\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"#element\": {\n" +
                    "                    \"deep\": {\n" +
                    "                        \"@deepattr\": \"deepvalue\",\n" +
                    "                        \"#deep\": [\n" +
                    "                            1, 2, 3\n" +
                    "                        ]\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            }\n" +
                    "        ],\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@attr11\": \"value11\",\n" +
                    "            \"#inner11\": {\n" +
                    "                \"inner12\": {\n" +
                    "                    \"@attr12\": \"value12\",\n" +
                    "                    \"#inner12\": {\n" +
                    "                        \"inner13\": {\n" +
                    "                            \"@attr13\": \"value13\",\n" +
                    "                            \"#inner13\": {\n" +
                    "                                \"inner14\": \"v14\"\n" +
                    "                            }\n" +
                    "                        }\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner15\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner16\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner16\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner16\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"crazyattr1\": {\n" +
                    "            \"@attr1\": 123,\n" +
                    "            \"#crazyattr1\": \"v15\"\n" +
                    "        },\n" +
                    "        \"crazyattr2\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#crazyattr2\": \"v16\"\n" +
                    "        },\n" +
                    "        \"crazyattr3\": {\n" +
                    "            \"@attr1\": null,\n" +
                    "            \"#crazyattr3\": \"v17\"\n" +
                    "        },\n" +
                    "        \"crazyattr4\": {\n" +
                    "            \"@attr1\": true,\n" +
                    "            \"#crazyattr4\": \"v18\"\n" +
                    "        },\n" +
                    "        \"crazyattr5\": {\n" +
                    "            \"@attr1\": false,\n" +
                    "            \"#crazyattr5\": \"v19\"\n" +
                    "        },\n" +
                    "        \"crazyattr6\": {\n" +
                    "            \"@attr1\": \"\",\n" +
                    "            \"#crazyattr6\": \"v20\"\n" +
                    "        },\n" +
                    "        \"crazyattr7\": {\n" +
                    "            \"@attr1\": {},\n" +
                    "            \"#crazyattr7\": \"v21\"\n" +
                    "        },\n" +
                    "        \"crazyattr9\": {\n" +
                    "            \"@attr1\": {\n" +
                    "                \"@\": 1,\n" +
                    "                \"#\": 2,\n" +
                    "                \"\": 3,\n" +
                    "                \"key\": 4\n" +
                    "            },\n" +
                    "            \"#crazyattr9\": \"v23\"\n" +
                    "        },\n" +
                    "        \"crazyattr10\": {\n" +
                    "            \"@attr1\": [],\n" +
                    "            \"#crazyattr10\": \"v24\"\n" +
                    "        },\n" +
                    "        \"crazyattr11\": {\n" +
                    "            \"attr1\": \"better\",\n" +
                    "            \"@attr1\": {\n" +
                    "                \"key9\": \"value9\"\n" +
                    "            },\n" +
                    "            \"#crazyattr11\": \"v25\"\n" +
                    "        },\n" +
                    "        \"crazyattr12\": {\n" +
                    "            \"@attr1\": [\n" +
                    "                \"\"\n" +
                    "            ],\n" +
                    "            \"#crazyattr12\": \"v26\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"won't be converted\"\n" +
                    "        },\n" +
                    "        \"@\": 123,\n" +
                    "        \"#\": [\n" +
                    "            1, 2, 3\n" +
                    "        ]\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753324</id>\n" +
                    "        <number region=\"Russia\">8-900-000-000</number>\n" +
                    "        <special1>false</special1>\n" +
                    "        <special2>true</special2>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <empty3></empty3>\n" +
                    "        <empty4></empty4>\n" +
                    "        <empty5></empty5>\n" +
                    "        <empty6></empty6>\n" +
                    "        <empty7></empty7>\n" +
                    "        <empty8></empty8>\n" +
                    "        <array1>\n" +
                    "            <element />\n" +
                    "            <element />\n" +
                    "        </array1>\n" +
                    "        <array2>\n" +
                    "            <element></element>\n" +
                    "            <element>true</element>\n" +
                    "            <element>false</element>\n" +
                    "            <element />\n" +
                    "            <element>123</element>\n" +
                    "            <element>123.456</element>\n" +
                    "            <element></element>\n" +
                    "            <element>\n" +
                    "                <key1>value1</key1>\n" +
                    "                <key2 attr=\"value2\">value3</key2>\n" +
                    "            </element>\n" +
                    "            <element attr2=\"value4\">value5</element>\n" +
                    "            <element>\n" +
                    "                <attr3>value4</attr3>\n" +
                    "                <elem>value5</elem>\n" +
                    "            </element>\n" +
                    "            <element />\n" +
                    "            <element>\n" +
                    "                <deep deepattr=\"deepvalue\">\n" +
                    "                    <element>1</element>\n" +
                    "                    <element>2</element>\n" +
                    "                    <element>3</element>\n" +
                    "                </deep>\n" +
                    "            </element>\n" +
                    "        </array2>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5=\"\" />\n" +
                    "        <inner11 attr11=\"value11\">\n" +
                    "            <inner12 attr12=\"value12\">\n" +
                    "                <inner13 attr13=\"value13\">\n" +
                    "                    <inner14>v14</inner14>\n" +
                    "                </inner13>\n" +
                    "            </inner12>\n" +
                    "        </inner11>\n" +
                    "        <inner15></inner15>\n" +
                    "        <inner16>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner16>notnull</inner16>\n" +
                    "        </inner16>\n" +
                    "        <crazyattr1 attr1=\"123\">v15</crazyattr1>\n" +
                    "        <crazyattr2 attr1=\"123.456\">v16</crazyattr2>\n" +
                    "        <crazyattr3 attr1=\"\">v17</crazyattr3>\n" +
                    "        <crazyattr4 attr1=\"true\">v18</crazyattr4>\n" +
                    "        <crazyattr5 attr1=\"false\">v19</crazyattr5>\n" +
                    "        <crazyattr6 attr1=\"\">v20</crazyattr6>\n" +
                    "        <crazyattr7 attr1=\"\">v21</crazyattr7>\n" +
                    "        <crazyattr9>\n" +
                    "            <attr1>\n" +
                    "                <key>4</key>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr9>v23</crazyattr9>\n" +
                    "        </crazyattr9>\n" +
                    "        <crazyattr10 attr1=\"\">v24</crazyattr10>\n" +
                    "        <crazyattr11>\n" +
                    "            <attr1>better</attr1>\n" +
                    "            <crazyattr11>v25</crazyattr11>\n" +
                    "        </crazyattr11>\n" +
                    "        <crazyattr12>\n" +
                    "            <attr1>\n" +
                    "                <element></element>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr12>v26</crazyattr12>\n" +
                    "        </crazyattr12>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );


            allTests.put(
                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753325</id>\n" +
                    "        <number region='Russia'>8-900-000-000</number>\n" +
                    "        <special1>false</special1>\n" +
                    "        <special2>true</special2>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <array1>\n" +
                    "            <element />\n" +
                    "            <element />\n" +
                    "        </array1>\n" +
                    "        <array2>\n" +
                    "            <element></element>\n" +
                    "            <element />\n" +
                    "            <element>123</element>\n" +
                    "            <element>123.456</element>\n" +
                    "            <element>\n" +
                    "                <key1>value1</key1>\n" +
                    "                <key2 attr=\"value2\">value3</key2>\n" +
                    "            </element>\n" +
                    "            <element attr2='value4'>value5</element>\n" +
                    "            <element>\n" +
                    "                <attr3>value4</attr3>\n" +
                    "                <elem>value5</elem>\n" +
                    "            </element>\n" +
                    "            <element>\n" +
                    "                <deep deepattr=\"deepvalue\">\n" +
                    "                    <element>1</element>\n" +
                    "                    <element>2</element>\n" +
                    "                    <element>3</element>\n" +
                    "                </deep>\n" +
                    "            </element>\n" +
                    "        </array2>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5='' />\n" +
                    "        <inner11 attr11=\"value11\">\n" +
                    "            <inner12 attr12=\"value12\">\n" +
                    "                <inner13 attr13=\"value13\">\n" +
                    "                    <inner14>v14</inner14>\n" +
                    "                </inner13>\n" +
                    "            </inner12>\n" +
                    "        </inner11>\n" +
                    "        <inner15></inner15>\n" +
                    "        <inner16>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner16>notnull</inner16>\n" +
                    "        </inner16>\n" +
                    "        <crazyattr1 attr1='123'>v15</crazyattr1>\n" +
                    "        <crazyattr2 attr1=\"123.456\">v16</crazyattr2>\n" +
                    "        <crazyattr3 attr1=''>v17</crazyattr3>\n" +
                    "        <crazyattr9>\n" +
                    "            <attr1>\n" +
                    "                <key>4</key>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr9>v23</crazyattr9>\n" +
                    "        </crazyattr9>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>",


                "{\n" +
                    "    \"root\": {\n" +
                    "        \"transaction\": {\n" +
                    "            \"id\": \"6753325\",\n" +
                    "            \"number\": {\n" +
                    "                \"@region\": \"Russia\",\n" +
                    "                \"#number\": \"8-900-000-000\"\n" +
                    "            },\n" +
                    "            \"special1\": \"false\",\n" +
                    "            \"special2\": \"true\",\n" +
                    "            \"empty1\": null,\n" +
                    "            \"empty2\": \"\",\n" +
                    "            \"array1\": [\n" +
                    "                null, null\n" +
                    "            ],\n" +
                    "            \"array2\": [\n" +
                    "                \"\",\n" +
                    "                null,\n" +
                    "                \"123\",\n" +
                    "                \"123.456\",\n" +
                    "                {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": {\n" +
                    "                        \"@attr\": \"value2\",\n" +
                    "                        \"#key2\": \"value3\"\n" +
                    "                    }\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"@attr2\": \"value4\",\n" +
                    "                    \"#element\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"attr3\": \"value4\",\n" +
                    "                    \"elem\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"deep\": {\n" +
                    "                        \"@deepattr\": \"deepvalue\",\n" +
                    "                        \"#deep\": [\n" +
                    "                            \"1\",\n" +
                    "                            \"2\",\n" +
                    "                            \"3\"\n" +
                    "                        ]\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            ],\n" +
                    "            \"inner1\": {\n" +
                    "                \"inner2\": {\n" +
                    "                    \"inner3\": {\n" +
                    "                        \"key1\": \"value1\",\n" +
                    "                        \"key2\": \"value2\"\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner4\": {\n" +
                    "                \"inner4\": \"value3\"\n" +
                    "            },\n" +
                    "            \"inner5\": {\n" +
                    "                \"attr1\": \"123.456\",\n" +
                    "                \"inner4\": \"value4\"\n" +
                    "            },\n" +
                    "            \"inner6\": {\n" +
                    "                \"@attr2\": \"789.321\",\n" +
                    "                \"#inner6\": \"value5\"\n" +
                    "            },\n" +
                    "            \"inner7\": \"value6\",\n" +
                    "            \"inner8\": {\n" +
                    "                \"attr3\": \"value7\"\n" +
                    "            },\n" +
                    "            \"inner9\": {\n" +
                    "                \"attr4\": \"value8\",\n" +
                    "                \"inner9\": \"value9\",\n" +
                    "                \"something\": \"value10\"\n" +
                    "            },\n" +
                    "            \"inner10\": {\n" +
                    "                \"@attr5\": \"\",\n" +
                    "                \"#inner10\": null\n" +
                    "            },\n" +
                    "            \"inner11\": {\n" +
                    "                \"@attr11\": \"value11\",\n" +
                    "                \"#inner11\": {\n" +
                    "                    \"inner12\": {\n" +
                    "                        \"@attr12\": \"value12\",\n" +
                    "                        \"#inner12\": {\n" +
                    "                            \"inner13\": {\n" +
                    "                                \"@attr13\": \"value13\",\n" +
                    "                                \"#inner13\": {\n" +
                    "                                    \"inner14\": \"v14\"\n" +
                    "                                }\n" +
                    "                            }\n" +
                    "                        }\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner15\": \"\",\n" +
                    "            \"inner16\": {\n" +
                    "                \"somekey\": \"keyvalue\",\n" +
                    "                \"inner16\": \"notnull\"\n" +
                    "            },\n" +
                    "            \"crazyattr1\": {\n" +
                    "                \"@attr1\": \"123\",\n" +
                    "                \"#crazyattr1\": \"v15\"\n" +
                    "            },\n" +
                    "            \"crazyattr2\": {\n" +
                    "                \"@attr1\": \"123.456\",\n" +
                    "                \"#crazyattr2\": \"v16\"\n" +
                    "            },\n" +
                    "            \"crazyattr3\": {\n" +
                    "                \"@attr1\": \"\",\n" +
                    "                \"#crazyattr3\": \"v17\"\n" +
                    "            },\n" +
                    "            \"crazyattr9\": {\n" +
                    "                \"attr1\": {\n" +
                    "                    \"key\": \"4\"\n" +
                    "                },\n" +
                    "                \"crazyattr9\": \"v23\"\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"meta\": {\n" +
                    "            \"version\": \"0.01\"\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );


            allTests.put(
                "{\"transaction\":{\"id\":\"6753326\",\"number\":{\"@region\":\"Russia\",\"#number\":\"8-900-000-000\"},\"special1\":false,\"special2\":true,\"empty1\":null,\"empty2\":{},\"empty3\":[],\"empty4\":{},\"empty5\":[],\"empty6\":{},\"empty7\":[],\"empty8\":\"\",\"array1\":[null,null],\"array2\":[[],true,false,null,123,123.456,\"\",{\"key1\":\"value1\",\"key2\":{\"@attr\":\"value2\",\"#key2\":\"value3\"}},{\"@attr2\":\"value4\",\"#element\":\"value5\"},{\"@attr3\":\"value4\",\"#elem\":\"value5\"},{\"#element\":null},{\"#element\":{\"deep\":{\"@deepattr\":\"deepvalue\",\"#deep\":[1,2,3]}}}],\"inner1\":{\"inner2\":{\"inner3\":{\"key1\":\"value1\",\"key2\":\"value2\"}}},\"inner4\":{\"@\":123,\"#inner4\":\"value3\"},\"inner5\":{\"@attr1\":123.456,\"#inner4\":\"value4\"},\"inner6\":{\"@attr2\":789.321,\"#inner6\":\"value5\"},\"inner7\":{\"#inner7\":\"value6\"},\"inner8\":{\"@attr3\":\"value7\"},\"inner9\":{\"@attr4\":\"value8\",\"#inner9\":\"value9\",\"something\":\"value10\"},\"inner10\":{\"@attr5\":null,\"#inner10\":null},\"inner11\":{\"@attr11\":\"value11\",\"#inner11\":{\"inner12\":{\"@attr12\":\"value12\",\"#inner12\":{\"inner13\":{\"@attr13\":\"value13\",\"#inner13\":{\"inner14\":\"v14\"}}}}}},\"inner15\":{\"@\":null,\"#\":null},\"inner16\":{\"@somekey\":\"attrvalue\",\"#inner16\":null,\"somekey\":\"keyvalue\",\"inner16\":\"notnull\"},\"crazyattr1\":{\"@attr1\":123,\"#crazyattr1\":\"v15\"},\"crazyattr2\":{\"@attr1\":123.456,\"#crazyattr2\":\"v16\"},\"crazyattr3\":{\"@attr1\":null,\"#crazyattr3\":\"v17\"},\"crazyattr4\":{\"@attr1\":true,\"#crazyattr4\":\"v18\"},\"crazyattr5\":{\"@attr1\":false,\"#crazyattr5\":\"v19\"},\"crazyattr6\":{\"@attr1\":\"\",\"#crazyattr6\":\"v20\"},\"crazyattr7\":{\"@attr1\":{},\"#crazyattr7\":\"v21\"},\"crazyattr9\":{\"@attr1\":{\"@\":1,\"#\":2,\"\":3,\"key\":4},\"#crazyattr9\":\"v23\"},\"crazyattr10\":{\"@attr1\":[],\"#crazyattr10\":\"v24\"},\"crazyattr11\":{\"attr1\":\"better\",\"@attr1\":{\"key9\":\"value9\"},\"#crazyattr11\":\"v25\"},\"crazyattr12\":{\"@attr1\":[\"\"],\"#crazyattr12\":\"v26\"},\"\":{\"#\":null,\"secret\":\"won't be converted\"},\"@\":123,\"#\":[1,2,3]},\"meta\":{\"version\":0.01}}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753326</id>\n" +
                    "        <number region=\"Russia\">8-900-000-000</number>\n" +
                    "        <special1>false</special1>\n" +
                    "        <special2>true</special2>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <empty3></empty3>\n" +
                    "        <empty4></empty4>\n" +
                    "        <empty5></empty5>\n" +
                    "        <empty6></empty6>\n" +
                    "        <empty7></empty7>\n" +
                    "        <empty8></empty8>\n" +
                    "        <array1>\n" +
                    "            <element />\n" +
                    "            <element />\n" +
                    "        </array1>\n" +
                    "        <array2>\n" +
                    "            <element></element>\n" +
                    "            <element>true</element>\n" +
                    "            <element>false</element>\n" +
                    "            <element />\n" +
                    "            <element>123</element>\n" +
                    "            <element>123.456</element>\n" +
                    "            <element></element>\n" +
                    "            <element>\n" +
                    "                <key1>value1</key1>\n" +
                    "                <key2 attr=\"value2\">value3</key2>\n" +
                    "            </element>\n" +
                    "            <element attr2=\"value4\">value5</element>\n" +
                    "            <element>\n" +
                    "                <attr3>value4</attr3>\n" +
                    "                <elem>value5</elem>\n" +
                    "            </element>\n" +
                    "            <element />\n" +
                    "            <element>\n" +
                    "                <deep deepattr=\"deepvalue\">\n" +
                    "                    <element>1</element>\n" +
                    "                    <element>2</element>\n" +
                    "                    <element>3</element>\n" +
                    "                </deep>\n" +
                    "            </element>\n" +
                    "        </array2>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5=\"\" />\n" +
                    "        <inner11 attr11=\"value11\">\n" +
                    "            <inner12 attr12=\"value12\">\n" +
                    "                <inner13 attr13=\"value13\">\n" +
                    "                    <inner14>v14</inner14>\n" +
                    "                </inner13>\n" +
                    "            </inner12>\n" +
                    "        </inner11>\n" +
                    "        <inner15></inner15>\n" +
                    "        <inner16>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner16>notnull</inner16>\n" +
                    "        </inner16>\n" +
                    "        <crazyattr1 attr1=\"123\">v15</crazyattr1>\n" +
                    "        <crazyattr2 attr1=\"123.456\">v16</crazyattr2>\n" +
                    "        <crazyattr3 attr1=\"\">v17</crazyattr3>\n" +
                    "        <crazyattr4 attr1=\"true\">v18</crazyattr4>\n" +
                    "        <crazyattr5 attr1=\"false\">v19</crazyattr5>\n" +
                    "        <crazyattr6 attr1=\"\">v20</crazyattr6>\n" +
                    "        <crazyattr7 attr1=\"\">v21</crazyattr7>\n" +
                    "        <crazyattr9>\n" +
                    "            <attr1>\n" +
                    "                <key>4</key>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr9>v23</crazyattr9>\n" +
                    "        </crazyattr9>\n" +
                    "        <crazyattr10 attr1=\"\">v24</crazyattr10>\n" +
                    "        <crazyattr11>\n" +
                    "            <attr1>better</attr1>\n" +
                    "            <crazyattr11>v25</crazyattr11>\n" +
                    "        </crazyattr11>\n" +
                    "        <crazyattr12>\n" +
                    "            <attr1>\n" +
                    "                <element></element>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr12>v26</crazyattr12>\n" +
                    "        </crazyattr12>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );


            allTests.put(
                "<root><transaction><id>6753327</id><number region='Russia'>8-900-000-000</number><special1>false</special1><special2>true</special2><empty1 /><empty2></empty2><array1><element /><element /></array1><array2><element></element><element /><element>123</element><element>123.456</element><element><key1>value1</key1><key2 attr=\"value2\">value3</key2></element><element attr2='value4'>value5</element><element><attr3>value4</attr3><elem>value5</elem></element><element><deep deepattr=\"deepvalue\"><element>1</element><element>2</element><element>3</element></deep></element></array2><inner1><inner2><inner3><key1>value1</key1><key2>value2</key2></inner3></inner2></inner1><inner4><inner4>value3</inner4></inner4><inner5><attr1>123.456</attr1><inner4>value4</inner4></inner5><inner6 attr2=\"789.321\">value5</inner6><inner7>value6</inner7><inner8><attr3>value7</attr3></inner8><inner9><attr4>value8</attr4><inner9>value9</inner9><something>value10</something></inner9><inner10 attr5='' /><inner11 attr11=\"value11\"><inner12 attr12=\"value12\"><inner13 attr13=\"value13\"><inner14>v14</inner14></inner13></inner12></inner11><inner15></inner15><inner16><somekey>keyvalue</somekey><inner16>notnull</inner16></inner16><crazyattr1 attr1='123'>v15</crazyattr1><crazyattr2 attr1=\"123.456\">v16</crazyattr2><crazyattr3 attr1=''>v17</crazyattr3><crazyattr9><attr1><key>4</key></attr1><crazyattr9>v23</crazyattr9></crazyattr9></transaction><meta><version>0.01</version></meta></root>",


                "{\n" +
                    "    \"root\": {" +
                    "        \"transaction\": {\n" +
                    "            \"id\": \"6753327\",\n" +
                    "            \"number\": {\n" +
                    "                \"@region\": \"Russia\",\n" +
                    "                \"#number\": \"8-900-000-000\"\n" +
                    "            },\n" +
                    "            \"special1\": \"false\",\n" +
                    "            \"special2\": \"true\",\n" +
                    "            \"empty1\": null,\n" +
                    "            \"empty2\": \"\",\n" +
                    "            \"array1\": [\n" +
                    "                null, null\n" +
                    "            ],\n" +
                    "            \"array2\": [\n" +
                    "                \"\",\n" +
                    "                null,\n" +
                    "                \"123\",\n" +
                    "                \"123.456\",\n" +
                    "                {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": {\n" +
                    "                        \"@attr\": \"value2\",\n" +
                    "                        \"#key2\": \"value3\"\n" +
                    "                    }\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"@attr2\": \"value4\",\n" +
                    "                    \"#element\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"attr3\": \"value4\",\n" +
                    "                    \"elem\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"deep\": {\n" +
                    "                        \"@deepattr\": \"deepvalue\",\n" +
                    "                        \"#deep\": [\n" +
                    "                            \"1\",\n" +
                    "                            \"2\",\n" +
                    "                            \"3\"\n" +
                    "                        ]\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            ],\n" +
                    "            \"inner1\": {\n" +
                    "                \"inner2\": {\n" +
                    "                    \"inner3\": {\n" +
                    "                        \"key1\": \"value1\",\n" +
                    "                        \"key2\": \"value2\"\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner4\": {\n" +
                    "                \"inner4\": \"value3\"\n" +
                    "            },\n" +
                    "            \"inner5\": {\n" +
                    "                \"attr1\": \"123.456\",\n" +
                    "                \"inner4\": \"value4\"\n" +
                    "            },\n" +
                    "            \"inner6\": {\n" +
                    "                \"@attr2\": \"789.321\",\n" +
                    "                \"#inner6\": \"value5\"\n" +
                    "            },\n" +
                    "            \"inner7\": \"value6\",\n" +
                    "            \"inner8\": {\n" +
                    "                \"attr3\": \"value7\"\n" +
                    "            },\n" +
                    "            \"inner9\": {\n" +
                    "                \"attr4\": \"value8\",\n" +
                    "                \"inner9\": \"value9\",\n" +
                    "                \"something\": \"value10\"\n" +
                    "            },\n" +
                    "            \"inner10\": {\n" +
                    "                \"@attr5\": \"\",\n" +
                    "                \"#inner10\": null\n" +
                    "            },\n" +
                    "            \"inner11\": {\n" +
                    "                \"@attr11\": \"value11\",\n" +
                    "                \"#inner11\": {\n" +
                    "                    \"inner12\": {\n" +
                    "                        \"@attr12\": \"value12\",\n" +
                    "                        \"#inner12\": {\n" +
                    "                            \"inner13\": {\n" +
                    "                                \"@attr13\": \"value13\",\n" +
                    "                                \"#inner13\": {\n" +
                    "                                    \"inner14\": \"v14\"\n" +
                    "                                }\n" +
                    "                            }\n" +
                    "                        }\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner15\": \"\",\n" +
                    "            \"inner16\": {\n" +
                    "                \"somekey\": \"keyvalue\",\n" +
                    "                \"inner16\": \"notnull\"\n" +
                    "            },\n" +
                    "            \"crazyattr1\": {\n" +
                    "                \"@attr1\": \"123\",\n" +
                    "                \"#crazyattr1\": \"v15\"\n" +
                    "            },\n" +
                    "            \"crazyattr2\": {\n" +
                    "                \"@attr1\": \"123.456\",\n" +
                    "                \"#crazyattr2\": \"v16\"\n" +
                    "            },\n" +
                    "            \"crazyattr3\": {\n" +
                    "                \"@attr1\": \"\",\n" +
                    "                \"#crazyattr3\": \"v17\"\n" +
                    "            },\n" +
                    "            \"crazyattr9\": {\n" +
                    "                \"attr1\": {\n" +
                    "                    \"key\": \"4\"\n" +
                    "                },\n" +
                    "                \"crazyattr9\": \"v23\"\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"meta\": {\n" +
                    "            \"version\": \"0.01\"\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));

                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            if (user.length() == 0) {
                return new CheckResult(false,
                    "Your output is empty line.");
            }

            CheckResult result;

            if (user.charAt(0) != '<' && user.charAt(0) != '{') {
                return new CheckResult(false,
                    "Your first symbol is wrong - " +
                        " should be '{' or '<'");
            }

            try {
                if (user.charAt(0) == '<' && answer.charAt(0) == '<') {
                    result = isEqualXMLs(user, answer);
                } else if (user.charAt(0) == '{' && answer.charAt(0) == '{') {
                    result = isEqualJSONs(user, answer);
                } else {
                    return new CheckResult(false,
                        "Your first symbol is wrong - " +
                            "'{' instead of '<' or vice versa" + "\n\n" + user + "\n\n" + answer);
                }
            } catch (Exception ex) {
                return new CheckResult(false,
                    "Can't check the output - invalid XML or JSON");
            }

            return result;
        }

        public static Element stringToXML(String str) throws Exception {
            DocumentBuilderFactory factory =
                DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            ByteArrayInputStream input = new ByteArrayInputStream(
                str.getBytes("UTF-8"));

            Document document = builder.parse(input);

            return document.getDocumentElement();
        }


        public static CheckResult isEqualXMLs(String s1, String s2) throws Exception {
            Element elem1 = stringToXML(s1);
            Element elem2 = stringToXML(s2);

            CheckResult result = isEqualXMLElements(elem1, elem2);

            if (!result.isCorrect()) {
                return result;
            } else {
                return isEqualXMLElements(elem2, elem1);
            }
        }

        public static CheckResult isEqualXMLElements(Element e1, Element e2) {
            // test name
            if (!e1.getNodeName().equals(e2.getNodeName())) {
                return new CheckResult(false,
                    "In XML: element name is incorrect");
            }

            // test attributes
            NamedNodeMap attributes = e1.getAttributes();
            for (int i = 0; i < attributes.getLength(); i++) {
                Attr attr = (Attr) attributes.item(i);

                String name = attr.getName();

                if (!e2.hasAttribute(name)) {
                    return new CheckResult(false,
                        "In XML: element doesn't have " +
                            "an attribute or has an excess attribute");
                }

                if (!attr.getValue().equals(e2.getAttribute(name))) {
                    return new CheckResult(false,
                        "In XML: element has an attribute " +
                            "but their values don't match");
                }
            }

            // test chidls
            if (e1.hasChildNodes() != e2.hasChildNodes()) {
                return new CheckResult(false,
                    "In XML: element doesn't have needed " +
                        "child nodes or has excess child nodes");
            }

            if (!e1.hasChildNodes()) {
                return CheckResult.correct();
            }

            NodeList childs1 = e1.getChildNodes();
            NodeList childs2 = e2.getChildNodes();

            List<Element> filteredChilds1 = new ArrayList<>();
            List<Element> filteredChilds2 = new ArrayList<>();

            for (int i = 0; i < childs1.getLength(); i++) {
                Object item = childs1.item(i);
                if (item instanceof Element) {
                    filteredChilds1.add((Element) childs1.item(i));
                }
            }

            for (int i = 0; i < childs2.getLength(); i++) {
                Object item = childs2.item(i);
                if (item instanceof Element) {
                    filteredChilds2.add((Element) childs2.item(i));
                }
            }

            if (filteredChilds1.size() != filteredChilds2.size()) {
                return new CheckResult(false,
                    "In XML: element doesn't have needed " +
                        "child nodes or has excess child nodes");
            }

            for (int i = 0; i < filteredChilds1.size(); i++) {

                Element elem1 = filteredChilds1.get(i);
                Element elem2 = filteredChilds2.get(i);

                CheckResult result = isEqualXMLElements(elem1, elem2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }

        public static JsonElement stringToJSON(String str) {
            return new JsonParser().parse(str);
        }


        public static CheckResult isEqualJSONs(String s1, String s2) {
            JsonElement elem1 = stringToJSON(s1);
            JsonElement elem2 = stringToJSON(s2);

            CheckResult result = isEqualJSONElements(elem1, elem2);

            if (!result.isCorrect()) {
                return result;
            } else {
                return isEqualJSONElements(elem2, elem1);
            }
        }

        public static CheckResult isEqualJSONElements(JsonElement e1, JsonElement e2) {

            // check for null
            if (e1.isJsonNull() != e2.isJsonNull()) {
                return new CheckResult(false,
                    "In JSON: expected null but found something else " +
                        "(or vice versa)");
            }
            if (e1.isJsonNull()) {
                return CheckResult.correct();
            }


            // check for primitives
            if (e1.isJsonPrimitive() != e2.isJsonPrimitive()) {
                // number and boolean are also may be expected but
                // after converting from XML there can be only strings
                return new CheckResult(false,
                    "In JSON: expected string " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonPrimitive()) {
                JsonPrimitive prim1 = e1.getAsJsonPrimitive();
                JsonPrimitive prim2 = e2.getAsJsonPrimitive();
                return compareJSONPrimitives(prim1, prim2);
            }


            // check for arrays
            if (e1.isJsonArray() != e2.isJsonArray()) {
                return new CheckResult(false,
                    "In JSON: expected array " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonArray()) {
                JsonArray arr1 = e1.getAsJsonArray();
                JsonArray arr2 = e2.getAsJsonArray();
                return compareJSONArrays(arr1, arr2);
            }


            // check for objects
            if (e1.isJsonObject() != e2.isJsonObject()) {
                return new CheckResult(false,
                    "In JSON: expected object " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonObject()) {
                JsonObject obj1 = e1.getAsJsonObject();
                JsonObject obj2 = e2.getAsJsonObject();
                return compareJSONObjects(obj1, obj2);
            }

            return CheckResult.correct();
        }


        public static CheckResult compareJSONPrimitives(JsonPrimitive prim1,
                                                        JsonPrimitive prim2) {

            if (prim1.isBoolean() && prim2.isBoolean()) {
                return new CheckResult(
                    prim1.getAsBoolean() == prim2.getAsBoolean(),
                    "In JSON: two boolean values don't match");
            }
            if (prim1.isNumber() && prim2.isNumber()) {
                BigDecimal num1 = prim1.getAsBigDecimal();
                BigDecimal num2 = prim2.getAsBigDecimal();
                return new CheckResult(num1.equals(num2),
                    "In JSON: two number values don't match");
            }
            if (prim1.isString() && prim2.isString()) {
                String num1 = prim1.getAsString();
                String num2 = prim2.getAsString();
                return new CheckResult(num1.equals(num2),
                    "In JSON: two string values don't match");
            }


            if (prim1.isString() && prim2.isNumber() ||
                prim1.isNumber() && prim2.isString()) {

                return new CheckResult(false,
                    "In JSON: expected string value but " +
                        "found number (or vice versa)");
            }
            if (prim1.isString() && prim2.isBoolean() ||
                prim1.isBoolean() && prim2.isString()) {

                return new CheckResult(false,
                    "In JSON: expected string value but " +
                        "found boolean (or vice versa)");
            }
            if (prim1.isNumber() && prim2.isBoolean() ||
                prim1.isBoolean() && prim2.isNumber()) {

                return new CheckResult(false,
                    "In JSON: expected number value but " +
                        "found boolean (or vice versa)");
            }

            return CheckResult.correct();
        }

        public static CheckResult compareJSONArrays(JsonArray arr1, JsonArray arr2) {
            if (arr1.size() != arr2.size()) {
                return new CheckResult(false,
                    "In JSON: array size is incorrect");
            }

            for (int i = 0; i < arr1.size(); i++) {
                JsonElement elem1 = arr1.get(i);
                JsonElement elem2 = arr2.get(i);

                CheckResult result = isEqualJSONElements(elem1, elem2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }

        public static CheckResult compareJSONObjects(JsonObject obj1, JsonObject obj2) {

            for (String key : obj1.keySet()) {
                if (!obj2.has(key)) {
                    return new CheckResult(false,
                        "In JSON: object doesn't have " +
                            "needed key or has an excess key");
                }

                JsonElement value1 = obj1.get(key);
                JsonElement value2 = obj2.get(key);

                CheckResult result = isEqualJSONElements(value1, value2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/test.tst
  visible: true
  text: |
    {
        "root1": {
            "@attr1": "val1",
            "@attr2": "val2",
            "#root1": {
                "elem1": {
                    "@attr3": "val3",
                    "@attr4": "val4",
                    "#elem1": "Value1"
                },
                "elem2": {
                    "@attr5": "val5",
                    "@attr6": "val6",
                    "#elem2": "Value2"
                }
            }
        },
        "root2": {
            "@attr1": null,
            "@attr2": "",
            "#root2": null
        },
        "root3": {
            "@attr1": "val2",
            "@attr2": "val1",
            "#root3": ""
        },
        "root4": "Value4"
    }
  learner_created: false
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.HashMap;
    import java.util.LinkedHashMap;
    import java.util.LinkedList;
    import java.util.List;
    import java.util.Map;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Main {

        private static final String SOURCE_FILE = "./test.txt";

        public static void main(String[] args) throws IOException {
            String input = readInput();

            ReaderWriter[] formats = new ReaderWriter[] {
                new XmlFormat(),
                new JsonFormat()
            };

            for (int i = 0; i < formats.length; i++) {
                if (formats[i].check(input)) {
                    Node node = formats[i].read(input);
                    if (node == null) {
                        return;
                    }
                    System.out.println(node.toFormat(formats[(i + 1) % formats.length]));
                }
            }
        }

        private static String readInput() throws IOException {
            return Files.readString(Paths.get(SOURCE_FILE));
        }
    }

    class Node {
        private String name;
        private Node parent;
        private String value;

        private final Map<String, String> attributes = new LinkedHashMap<>();
        private final List<Node> children = new LinkedList<>();

        public Node() {
            this(null);
        }

        public Node(String name) {
            this(name, null);
        }

        public Node(String name, Node parent) {
            this.name = name;
            this.parent = parent;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Node getParent() {
            return parent;
        }

        public void setAttribute(String key, String value) {
            attributes.put(key, value);
        }

        public boolean hasAttributes() {
            return !attributes.isEmpty();
        }

        public Map<String, String> getAttributes() {
            return attributes;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public Node addChild(String name) {
            return addChild(new Node(name));
        }

        public Node addChild(Node child) {
            child.setParent(this);
            children.add(child);
            return child;
        }

        public Node removeChild(Node child) {
            int i = children.indexOf(child);
            if (i < 0) {
                return null;
            }
            child.setParent(null);
            return children.remove(i);
        }

        public void setParent(Node parent) {
            this.parent = parent;
        }

        public String getPath() {
            StringBuilder path = new StringBuilder();
            Node node = this;
            boolean first = true;
            while (node != null) {
                if (node.getName() != null) {
                    if (first) {
                        first = false;
                    } else {
                        path.insert(0, ", ");
                    }
                    path.insert(0, node.getName());
                }
                node = node.getParent();
            }
            return path.toString();
        }

        public boolean hasChildren() {
            return !children.isEmpty();
        }

        public Map<String, Node> getChildrenMap() {
            Map<String, Node> map = new LinkedHashMap<>();
            for (Node child : children) {
                map.put(child.getName(), child);
            }
            return map;
        }

        public List<Node> getChildren() {
            return children;
        }

        @Override
        public String toString() {
            StringBuilder out = new StringBuilder();

            if (getName() != null) {
                out.append(String.format("Element:\npath = %s\n", getPath()));

                if (value == null) {
                    if (children.isEmpty()) {
                        out.append("value = null\n");
                    }
                } else {
                    out.append(String.format("value = \"%s\"\n", value));
                }

                if (!attributes.isEmpty()) {
                    out.append("attributes:\n");
                    for (Map.Entry<String, String> attr : attributes.entrySet()) {
                        out.append(String.format("%s = \"%s\"\n",
                                                 attr.getKey(),
                                                 attr.getValue() == null ? "" : attr.getValue()));
                    }
                }
            }

            for (Node child : children) {
                out.append("\n").append(child);
            }

            return out.toString();
        }

        public String toFormat(ReaderWriter rw) {
            return rw.write(this);
        }

    }

    class Tokenizer {
        private class TokenMatcher {
            private final Matcher matcher;

            public TokenMatcher(Pattern pattern) {
                matcher = pattern.matcher(source)
                                 .useAnchoringBounds(true);
            }

            public boolean find() {
                if (check()) {
                    cursor = matcher.end();
                    return true;
                }
                return false;
            }

            public boolean check() {
                return matcher.region(cursor, source.length()).find();
            }

            public Matcher getMatcher() {
                return matcher;
            }
        }

        private int cursor;
        private Matcher matcher;
        private final String source;
        private final Map<Pattern, TokenMatcher> tokenMatchers = new HashMap<>();

        public Tokenizer(String source) {
            this(source, 0);
        }

        public Tokenizer(String source, int cursor) {
            this.source = source;
            this.cursor = cursor;
        }

        public boolean next(Pattern pattern) {
            TokenMatcher tokenMatcher = getTokenMatcher(pattern);
            matcher = tokenMatcher.find() ? tokenMatcher.getMatcher() : null;
            return matcher != null;
        }

        public boolean check(Pattern pattern) {
            TokenMatcher tokenMatcher = getTokenMatcher(pattern);
            matcher = tokenMatcher.check() ? tokenMatcher.getMatcher() : null;
            return matcher != null;
        }

        public boolean next(String pattern) {
            TokenMatcher tokenMatcher = new TokenMatcher(Pattern.compile(pattern));
            matcher = tokenMatcher.find() ? tokenMatcher.getMatcher() : null;
            return matcher != null;
        }

        public boolean check(String pattern) {
            TokenMatcher tokenMatcher = new TokenMatcher(Pattern.compile(pattern));
            matcher = tokenMatcher.check() ? tokenMatcher.getMatcher() : null;
            return matcher != null;
        }

        private TokenMatcher getTokenMatcher(Pattern pattern) {
            if (!tokenMatchers.containsKey(pattern)) {
                tokenMatchers.put(pattern, new TokenMatcher(pattern));
            }
            return tokenMatchers.get(pattern);
        }

        public int getCursor() {
            return cursor;
        }

        public void setCursor(int cursor) {
            this.cursor = cursor;
        }

        public Matcher getMatcher() {
            return matcher;
        }
    }

    interface ReaderWriter {
        boolean check(String src);

        Node read(String src);

        String write(Node node);
    }

    class JsonFormat implements ReaderWriter {
        private static final Pattern JSON_BEGINNING = Pattern.compile("(?s)^\\s*\\{\\s*[\"}]");

        private static final Pattern OBJECT_BEGINNING = Pattern.compile("(?s)^\\s*\\{\\s*");
        private static final Pattern OBJECT_ENDING = Pattern.compile("(?s)^\\s*}\\s*,?");
        private static final Pattern OBJECT_ATTRIBUTE_ID = Pattern.compile("(?s)^\\s*\"(.*?)\"\\s*:\\s*");
        private static final Pattern OBJECT_ATTRIBUTE_VALUE =
            Pattern.compile("(?s)^\\s*(\"(.*?)\"|(\\d+\\.?\\d*)|(null)),?");

        private static final Pattern PATTERN_XML_ATTRIBUTE = Pattern.compile("(?i)^[#@][a-z_][.\\w]*");
        private static final Pattern PATTERN_XML_IDENTIFIER = Pattern.compile("(?i)^[a-z_][.\\w]*");

        @Override
        public boolean check(String src) {
            return JSON_BEGINNING.matcher(src).find();
        }

        @Override
        public Node read(String src) {
            return readObject(new Tokenizer(src), new Node());
        }

        @Override
        public String write(Node node) {
            return writeNode(new StringBuilder(), node).toString();
        }

        private static StringBuilder writeNode(StringBuilder out, Node node) {
            if (node.hasAttributes()) {
                out.append("{\n");

                for (Map.Entry<String, String> elem : node.getAttributes().entrySet()) {
                    out.append(String.format("\"@%s\" : \"%s\",\n", elem.getKey(), elem.getValue()));
                }

                if (node.hasChildren()) {
                    out.append(String.format("\"#%s\": ", node.getName()));
                    writeChildren(out, node);
                } else if (node.getValue() == null) {
                    out.append(String.format("\"#%s\" : null\n", node.getName()));
                } else {
                    out.append(String.format("\"#%s\" : \"%s\"\n", node.getName(), node.getValue()));
                }

                out.append(" }");

            } else if (node.hasChildren()) {
                writeChildren(out, node);

            } else if (node.getValue() == null) {
                out.append("null");

            } else {
                out.append(String.format("\"%s\"", node.getValue()));

            }

            return out;
        }

        private static void writeChildren(StringBuilder out, Node node) {
            if (node.hasChildren()) {
                out.append("{\n");
            }

            Node child;
            for (int i = 0; i < node.getChildren().size(); i++) {
                child = node.getChildren().get(i);
                out.append(String.format("\"%s\" : ", child.getName()));
                writeNode(out, child);
                if (i != node.getChildren().size() - 1) {
                    out.append(",\n");
                }
            }

            if (node.hasChildren()) {
                out.append(" }");
            }
        }

        private static boolean isObject(Node node) {
            return node.getName() == null || node.hasChildren() || node.hasAttributes();
        }

        private static Node readObject(Tokenizer tokenizer, Node parent) {
            if (!tokenizer.next(OBJECT_BEGINNING)) {
                return null;
            }

            Node node;
            Matcher matcher;
            while (tokenizer.next(OBJECT_ATTRIBUTE_ID)) {
                node = new Node(tokenizer.getMatcher().group(1));
                if (tokenizer.check(JSON_BEGINNING)) {
                    readObject(tokenizer, node);
                    processObject(node);

                } else if (tokenizer.next(OBJECT_ATTRIBUTE_VALUE)) {
                    matcher = tokenizer.getMatcher();
                    if (matcher.group(2) != null) { // string
                        node.setValue(matcher.group(2));
                    } else if (matcher.group(3) != null) { // number
                        node.setValue(matcher.group(3));
                    } else if (matcher.group(4) != null) { // null
                        node.setValue(null);
                    } else {
                        throw new RuntimeException("Unknown attribute value.");
                    }
                } else {
                    throw new RuntimeException("Attribute value expected.");
                }
                parent.addChild(node);
            }

            if (!tokenizer.next(OBJECT_ENDING)) {
                throw new RuntimeException("Object end expected.");
            }

            return parent;
        }

        private static boolean isValidXmlAttribute(String name) {
            return name != null && PATTERN_XML_ATTRIBUTE.matcher(name).matches();
        }

        private static boolean isValidXmlIdentifier(String name) {
            return name != null && PATTERN_XML_IDENTIFIER.matcher(name).matches();
        }

        private static boolean isXmlAttributes(Node node) {
            Map<String, Node> map = node.getChildrenMap();
            if (!map.containsKey("#" + node.getName())) {
                return false;
            }
            for (Map.Entry<String, Node> elem : map.entrySet()) {
                if (!isValidXmlAttribute(elem.getKey())) {
                    return false;
                }
                if (elem.getKey().charAt(1) == '@' && elem.getValue().hasChildren()) {
                    return false;
                }
            }
            return true;
        }

        private static void processObject(Node node) {
            Node child;
            if (isXmlAttributes(node)) {
                for (Map.Entry<String, Node> elem : node.getChildrenMap().entrySet()) {
                    child = elem.getValue();
                    if (elem.getKey().charAt(0) == '#') {
                        if (child.hasChildren()) {
                            node.removeChild(child);
                            for (Node subChild : child.getChildrenMap().values()) {
                                node.addChild(subChild);
                            }
                        } else {
                            child = node.removeChild(elem.getValue());
                            node.setValue(child.getValue());
                        }
                    } else {
                        child = node.removeChild(elem.getValue());
                        node.setAttribute(child.getName().substring(1), child.getValue());
                    }
                }

            } else {
                Map<String, Node> childrenMap = node.getChildrenMap();
                for (Map.Entry<String, Node> elem : childrenMap.entrySet()) {
                    if (isValidXmlAttribute(elem.getKey())) {
                        if (childrenMap.containsKey(elem.getKey().substring(1))) {
                            node.removeChild(elem.getValue());
                        } else {
                            elem.getValue().setName(elem.getValue().getName().substring(1));
                        }
                    } else if (!isValidXmlIdentifier(elem.getKey())) {
                        node.removeChild(elem.getValue());
                    }
                }
                if (!node.hasChildren()) {
                    node.setValue("");
                }
            }

        }
    }

    class XmlFormat implements ReaderWriter {
        private static final Pattern XML_BEGINNING = Pattern.compile("(?s)^\\s*<\\s*[a-z_]\\w+");
        private static final Pattern TAG_OPEN =
            Pattern.compile("(?is)^\\s*<\\s*([a-z_]\\w+)\\s*([a-z_]\\w+\\s*=\\s*\".*?\")*\\s*(>|/>)");
        private static final Pattern ATTRIBUTES = Pattern.compile("(?is)([a-z_]\\w+)\\s*=\\s*\"(.*?)\"");

        @Override
        public boolean check(String src) {
            return XML_BEGINNING.matcher(src).find();
        }

        @Override
        public Node read(String src) {
            return readTags(new Tokenizer(src), new Node());
        }

        @Override
        public String write(Node node) {
            return writeNode(new StringBuilder(), node).toString();
        }

        private static StringBuilder writeNode(StringBuilder out, Node node) {
            String nodeName = node.getName();
            if (nodeName == null) {
                if (node.getChildren().size() > 1) {
                    out.append("<root>\n");
                }
                for (Node child : node.getChildren()) {
                    writeNode(out, child);
                }
                if (node.getChildren().size() > 1) {
                    out.append("</root>\n");
                }
                return out;
            }
            out.append(String.format("<%s", nodeName));
            for (Map.Entry<String, String> elem : node.getAttributes().entrySet()) {
                out.append(String.format(" %s = \"%s\"", elem.getKey(), elem.getValue() == null ? "" : elem.getValue()));
            }
            if (node.hasChildren()) {
                out.append(">\n");
                for (Node child : node.getChildren()) {
                    writeNode(out, child);
                }
                out.append(String.format("</%s>\n", nodeName));
            } else if (node.getValue() == null) {
                out.append("/>\n");
            } else {
                out.append(">");
                out.append(node.getValue());
                out.append(String.format("</%s>\n", nodeName));
            }
            return out;
        }

        private static Node readTags(Tokenizer tokenizer, Node parent) {
            Node node;
            Matcher matcher;
            while (tokenizer.next(TAG_OPEN)) {
                matcher = tokenizer.getMatcher();
                node = parent.addChild(matcher.group(1));
                readAttributes(matcher.group(2), node);

                if (">".equals(matcher.group(3))) {
                    if (tokenizer.check(XML_BEGINNING)) {
                        readTags(tokenizer, node);
                    }
                    if (!tokenizer.next(String.format("(?s)^(.*?)<\\s*\\/%s\\s*>", node.getName()))) {
                        throw new RuntimeException("Enclosing tag expected.");
                    }
                    if (!node.hasChildren()) {
                        node.setValue(tokenizer.getMatcher().group(1));
                    }
                }
            }
            return parent;
        }

        private static void readAttributes(String src, Node node) {
            if (src == null) {
                return;
            }
            Matcher matcher;
            Tokenizer tokenizer = new Tokenizer(src);
            while (tokenizer.next(ATTRIBUTES)) {
                matcher = tokenizer.getMatcher();
                node.setAttribute(matcher.group(1), matcher.group(2));
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/61/stages/334/implement
status: Failed
feedback:
  message: "Exception in test #1\n\njava.lang.RuntimeException: Attribute value expected.\r\
    \n\tat converter.JsonFormat.readObject(Main.java:391)\r\n\tat converter.JsonFormat.readObject(Main.java:376)\r\
    \n\tat converter.JsonFormat.read(Main.java:301)\r\n\tat converter.Main.main(Main.java:28)"
  time: Fri, 20 Nov 2020 15:26:59 UTC
record: -1
