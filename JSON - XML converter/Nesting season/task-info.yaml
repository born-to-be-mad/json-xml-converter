type: edu
custom_name: stage3
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends StageTest<Clue> {
        public ConverterTest() {
            super(Main.class);
        }

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-000-00-00</number>\n" +
                    "    <nonattr />\n" +
                    "    <nonattr></nonattr>\n" +
                    "    <nonattr>text</nonattr>\n" +
                    "    <attr id=\"1\" />\n" +
                    "    <attr id=\"2\"></attr>\n" +
                    "    <attr id=\"3\">text</attr>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</transaction>",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-000-00-00\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = null\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = \"text\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = \"text\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, to\n" +
                    "value = \"to_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, from\n" +
                    "value = \"from_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, subject\n" +
                    "value = \"Project discussion\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, body\n" +
                    "value = \"Body message\"\n" +
                    "attributes:\n" +
                    "font = \"Verdana\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, date\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "day = \"12\"\n" +
                    "month = \"12\"\n" +
                    "year = \"2018\""
            );

            allTests.put(
                "<node>\n" +
                    "    <child name = \"child_name1\" type = \"child_type1\">\n" +
                    "        <subchild id = \"1\" auth=\"auth1\">Value1</subchild>\n" +
                    "    </child>\n" +
                    "    <child name = \"child_name2\" type = \"child_type2\">\n" +
                    "        <subchild id = \"2\" auth=\"auth1\">Value2</subchild>\n" +
                    "        <subchild id = \"3\" auth=\"auth2\">Value3</subchild>\n" +
                    "        <subchild id = \"4\" auth=\"auth3\"></subchild>\n" +
                    "        <subchild id = \"5\" auth=\"auth3\"/>\n" +
                    "    </child>\n" +
                    "</node>",


                "Element:\n" +
                    "path = node\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name1\"\n" +
                    "type = \"child_type1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name2\"\n" +
                    "type = \"child_type2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value3\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "auth = \"auth2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"4\"\n" +
                    "auth = \"auth3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"5\"\n" +
                    "auth = \"auth3\""
            );

            allTests.put(
                "<node><child name=\"child_name1\" type=\"chil" +
                    "d_type1\"><subchild id=\"1\" auth=\"auth1\">" +
                    "Value1</subchild></child><child name=\"child" +
                    "_name2\" type=\"child_type2\"><subchild id=\"" +
                    "2\" auth=\"auth1\">Value2</subchild><subchil" +
                    "d id=\"3\" auth=\"auth2\">Value3</subchild><s" +
                    "ubchild id=\"4\" auth=\"auth3\"></subchild><su" +
                    "bchild id=\"5\" auth=\"auth3\"/></child></node>",


                "Element:\n" +
                    "path = node\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name1\"\n" +
                    "type = \"child_type1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name2\"\n" +
                    "type = \"child_type2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value3\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "auth = \"auth2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"4\"\n" +
                    "auth = \"auth3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"5\"\n" +
                    "auth = \"auth3\""
            );

            allTests.put(
                "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-999-00-00</number>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</transaction>",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-999-00-00\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, to\n" +
                    "value = \"to_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, from\n" +
                    "value = \"from_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, subject\n" +
                    "value = \"Project discussion\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, body\n" +
                    "value = \"Body message\"\n" +
                    "attributes:\n" +
                    "font = \"Verdana\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, date\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "day = \"12\"\n" +
                    "month = \"12\"\n" +
                    "year = \"2018\""
            );
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));
                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            List<String> userLines = user
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            List<String> answerLines = answer
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (userLines.size() < answerLines.size()) {

                LinkedHashSet<String> answerSet = new LinkedHashSet<>();
                answerSet.addAll(answerLines);
                for (String line : userLines) {
                    answerSet.remove(line);
                }
                if (!answerSet.isEmpty()) {
                    String notFoundLine = answerSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not found in output:\n" + notFoundLine);
                }
                return new CheckResult(false);

            } else if (userLines.size() > answerLines.size()) {

                LinkedHashSet<String> userSet = new LinkedHashSet<>();
                userSet.addAll(answerLines);
                for (String line : answerLines) {
                    userSet.remove(line);
                }
                if (!userSet.isEmpty()) {
                    String excessLine = userSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not needed in output:\n" + excessLine);
                }
                return new CheckResult(false);

            } else {

                for (int i = 0; i < userLines.size(); i++) {

                    String userLine = userLines.get(i);
                    String answerLine = answerLines.get(i);

                    if (!userLine.equals(answerLine)) {
                        return new CheckResult(false,
                            "The following line was expected:\n" + answerLine + "\n" +
                                "The following line was given:\n" + userLine);
                    }
                }

                return CheckResult.correct();
            }
        }
    }
  learner_created: false
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Collections;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import static java.util.stream.Collectors.joining;

    public class Main {

        private static final String SOURCE_FILE = "./test.txt";

        public static void main(String[] args) throws IOException {
            String input = readInput();
            Converter converter = new Converter(input);
            String output = converter.isXmlSource ? converter.json : converter.xml;
            System.out.println(output);
        }

        private static String readInput() throws IOException {
            return Files.readString(Paths.get(SOURCE_FILE));
        }
    }

    class Converter {

        String json;
        String xml;
        boolean isXmlSource;

        public Converter(String input) {
            String inputNoLineTerminators = input.replaceAll("\\r", "")
                                                 .replaceAll("\\n", "");
            this.isXmlSource = isXml(inputNoLineTerminators);
            parse(inputNoLineTerminators);
        }

        private static boolean isXml(String input) {
            return input.trim().charAt(0) == '<';
        }

        private void parse(String input) {
            if (isXmlSource) {
                xml = input;
                json = parseToJson(input);
            } else {
                json = input;
                xml = parseToXml(input);
            }
        }

        private String parseToXml(String input) {
            return new JsonReader(input).toNode().toXml();
        }

        private String parseToJson(String input) {
            return new XmlReader(input).toNode().toJson();
        }
    }

    /**
     * Node that can be represented as JSON/XML string.
     */
    class Node {
        String element;
        String content;
        Map<String, String> attributes;

        public String toXml() {
            String strOfAttributes = toXmlStr(attributes);
            if (content == null || content.equalsIgnoreCase("null")) {
                return String.format("<%1$s %2$s />", element, strOfAttributes);
            } else {
                return String.format("<%1$s %3$s>%2$s</%1$s>", element, content, strOfAttributes);
            }
        }

        private String toXmlStr(Map<String, String> attributes) {
            return attributes.entrySet().stream()
                             .map(entry -> String.format("%s = \"%s\"", entry.getKey().substring(1), entry.getValue()))
                             .collect(joining(" "));
        }

        public String toJson() {
            String contentValue = content == null ? "null" : ("\"" + content + "\"");
            if (attributes.isEmpty()) {
                return String.format("{\"%1$s\":%2$s}", element, contentValue);
            } else {
                String strOfAttributes = toJsonStr(attributes);
                return String.format("{\"%1$s\": {%3$s, \"#%1$s\": %2$s}}", element, contentValue, strOfAttributes);
            }
        }

        private String toJsonStr(Map<String, String> attributes) {
            return attributes.entrySet().stream()
                             .map(entry -> String.format("\"@%s\" : \"%s\"", entry.getKey(), entry.getValue()))
                             .collect(joining(", "));
        }

        @Override
        public String toString() {
            return "Node{" +
                   "element='" + element + '\'' +
                   ", content='" + content + '\'' +
                   ", attributes=" + attributes +
                   '}';
        }
    }

    abstract class Reader {
        static final String ELEMENT_NAME = "elementName";
        static final String ATTRIBUTES = "attributes";
        static final String CONTENT = "content";
        static final String ATTRIBUTE_NAME = "attributeName";
        static final String ATTRIBUTE_VALUE = "attributeValue";

        protected final String input;

        protected Reader(String input) {
            this.input = input;
        }

        public Node toNode() {
            Node node = new Node();
            node.element = getNodeElementName().trim();
            node.content = getNodeContent() == null ? null : getNodeContent().trim();
            node.attributes = extractAttributes(getNodeAttributes());
            return node;
        }

        protected abstract String getNodeElementName();

        protected abstract String getNodeContent();

        protected abstract String getNodeAttributes();

        protected abstract Pattern getAttributePairsPattern();

        private Map<String, String> extractAttributes(String strOfAttributes) {
            if (strOfAttributes == null || strOfAttributes.isBlank()) {
                return Collections.emptyMap();
            }
            return parseAttributes(strOfAttributes);
        }

        private Map<String, String> parseAttributes(String strOfAttributes) {
            Map<String, String> attributes = new HashMap<>();
            Matcher matcher = getAttributePairsPattern().matcher(strOfAttributes);
            while (matcher.find()) {
                attributes.put(matcher.group(ATTRIBUTE_NAME).trim(), matcher.group(ATTRIBUTE_VALUE).trim());
            }
            return attributes;
        }
    }

    class XmlReader extends Reader {
        private final Pattern full = Pattern.compile(
            String.format("<(?<%s>\\w+)(?<%s>.*)>(?<%s>.*)<.*>", ELEMENT_NAME, ATTRIBUTES, CONTENT)
        );

        private final Pattern empty = Pattern.compile(
            String.format("<(?<%s>\\w+)(?<%s>.*)/>", ELEMENT_NAME, ATTRIBUTES)
        );

        private final Pattern attributes = Pattern.compile(
            String.format("\\s*(?<%s>\\w+)\\s*=\\s*\"(?<%s>\\w+)\"\\s*", ATTRIBUTE_NAME, ATTRIBUTE_VALUE)
        );

        private final Pattern neverMatchingPattern = Pattern.compile("^@$");

        private final Matcher nameMatcher;
        private final Matcher contentMatcher;
        private final Matcher attributeMatcher;

        public XmlReader(String xmlInput) {
            super(xmlInput);
            boolean isFullNode = isFullNode(xmlInput);
            this.nameMatcher = determineElementNameMatcher(isFullNode);
            this.contentMatcher = determineContentMatcher(isFullNode);
            this.attributeMatcher = determineAttributeMatcher(isFullNode);
        }

        private boolean isFullNode(String xml) {
            return full.matcher(xml).matches();
        }

        private Matcher determineElementNameMatcher(boolean isFullNode) {
            return isFullNode ? full.matcher(input) : empty.matcher(input);
        }

        private Matcher determineContentMatcher(boolean isFullNode) {
            return isFullNode ? full.matcher(input) : neverMatchingPattern.matcher(input);
        }

        private Matcher determineAttributeMatcher(boolean isFullNode) {
            return isFullNode ? full.matcher(input) : empty.matcher(input);
        }

        @Override
        protected String getNodeElementName() {
            return nameMatcher.matches() ? nameMatcher.group(ELEMENT_NAME) : null;
        }

        @Override
        protected String getNodeContent() {
            return contentMatcher.matches() ? contentMatcher.group(CONTENT) : null;
        }

        @Override
        protected String getNodeAttributes() {
            return attributeMatcher.matches() ? attributeMatcher.group(ATTRIBUTES) : null;
        }

        @Override
        protected Pattern getAttributePairsPattern() {
            return attributes;
        }
    }

    class JsonReader extends Reader {
        Pattern withAttributesNameAndContent = Pattern.compile(String.format(
            "\\{\\s*\"(?<%s>\\w+)\"\\s*:\\s*\\{[\\s\\p{ASCII}]*(\"#.*?\"\\s+:\\s+\"?(?<%s>(null|[^\"]*))\"?)[\\s\\p{ASCII}]*}\\s*}\\s*",
            ELEMENT_NAME, CONTENT));
        Pattern withAttributesAttributes = Pattern.compile(String.format(
            "[\\s\\p{ASCII}]*\\{[\\s\\p{ASCII}]*\\{(?<%s>[\\s\\p{ASCII}]*)}[\\s\\p{ASCII}]*}[\\s\\p{ASCII}]*",
            ATTRIBUTES));
        Pattern attributes = Pattern.compile(String.format(
            "\\s*\"(?<%s>[^#\"]*)\"\\s*:\\s\"?(?<%s>null|\\d+|[^\"]*)\"?\\s*",
            ATTRIBUTE_NAME, ATTRIBUTE_VALUE));
        Pattern noAttributes = Pattern.compile(String.format(
            "\\{\\s*\"(?<%s>\\w+)\"\\s*:\\s*\"?(?<%s>(null|[^\"]*))\"?\\s*}",
            ELEMENT_NAME, CONTENT));
        private final Pattern neverMatchingPattern = Pattern.compile("^@$");

        private final Matcher nameMatcher;
        private final Matcher contentMatcher;
        private final Matcher attributeMatcher;

        public JsonReader(String jsonInput) {
            super(jsonInput);
            boolean haveAttributes = isWithAttributes(jsonInput);
            this.nameMatcher = determineNameMatcher(haveAttributes);
            this.contentMatcher = determineContentMatcher(haveAttributes);
            this.attributeMatcher = determineAttributesMatcher(haveAttributes);
        }

        private boolean isWithAttributes(String jsonInput) {
            return !noAttributes.matcher(jsonInput).matches();
        }

        private Matcher determineNameMatcher(boolean haveAttributes) {
            return haveAttributes ? withAttributesNameAndContent.matcher(input) : noAttributes.matcher(input);
        }

        private Matcher determineContentMatcher(boolean haveAttributes) {
            return haveAttributes ? withAttributesNameAndContent.matcher(input) : noAttributes.matcher(input);
        }

        private Matcher determineAttributesMatcher(boolean haveAttributes) {
            return haveAttributes ? withAttributesAttributes.matcher(input) : neverMatchingPattern.matcher(input);
        }

        @Override
        protected String getNodeElementName() {
            return nameMatcher.matches() ? nameMatcher.group(ELEMENT_NAME) : null;
        }

        @Override
        protected String getNodeContent() {
            return contentMatcher.matches() ? contentMatcher.group(CONTENT) : null;
        }

        @Override
        protected String getNodeAttributes() {
            return attributeMatcher.matches() ? attributeMatcher.group(ATTRIBUTES) : null;
        }

        @Override
        protected Pattern getAttributePairsPattern() {
            return attributes;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/61/stages/331/implement
status: Unchecked
record: -1
